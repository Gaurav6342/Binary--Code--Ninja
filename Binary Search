Binary Search

Problem Statement
You are given an integer array 'A' of size 'W' sorted in ascending order. You are also given an integer 'target'! Your task is to write a function to search for 'target' in the array "A" If it exists, return its index in 0-based indexing. Otherwise, return -1,
Note: You must write an algorithm whose time complexity Is O(logN).
Example:
Input: 'N' = 7 'target' 3                                                                                                                                  
    A = [1, 3, 7, 9, 11, 12, 45]                                                                                                  
  Output: 1
Explanation: For A = [1, 3, 7, 9, 11, 12,
45],
The index of element '3' is 1.
Hence, the answer is '1'.
Detailed explanation (Input/output format, Notes, Images
Constraints:
1 <= N <= 10^4
1 <= A[i] <= 10^9
1 <= target <= 10^9
Time Limit: 1 sec

Sample Input 1:
7
1 3 7 9 11 12 45
3
Sample Output 1:
1
Explanation Of Sample Output 1:
For nums = [1, 3, 7, 9, 11, 12, 45],
The index of element '3' is 1.
Hence, the answer is '1'.
Sample Input 2:
7
1 2 3 4 5 6 7
9
Sample Output 2:
-1
Explanation Of Sample Output 2:
For nums = [1, 2, 3, 4, 5, 6, 7],
Element '9' doesn't exist.
Hence, the answer is '-1'. 



Solution:
Python 3.5 Code:


def search(nums: [int], target: int):
    left = 0
    right = len(nums) - 1
    found = False

    while left <= right:
        mid = (left + right) // 2

        if nums[mid] == target:
            found = True
            break
        elif target < nums[mid]:
            right = mid - 1
        else:
            left = mid + 1

    if found:
        return mid
    else:
        return -1
Outputs:
test Case 1 :
10
3 4 7 8 9 11 12 13 17 19 
93
output:
-1

test Case 2 :
7
1 3 7 9 11 12 45
3
Output:
1
